HTTPS_PROXY="http://proxy-dmz.intel.com:912/"
HTTP_PROXY="http://proxy-dmz.intel.com:912/"
NO_PROXY="localhost,intel.com,192.168.0.0/16,172.16.0.0/12,127.0.0.0/8,10.0.0.0/8,163.33.0.0/16,137.46.0.0/16,137.102.0.0/16"

 

// Several plugins like WithPyenv is not working perfectly accross platform when using Virtual Env.
// Put this method outside pipeline
def Python(String command) {
    if (env.ISUNIX == "TRUE") {
        sh script:"source pyenv/bin/activate && python ${command}", label: "python ${command}"
    }
    else {
        powershell script:"pyenv\\Scripts\\Activate.ps1 ; python ${command}", label: "python ${command}"
    }
}

pipeline {
    
     agent {
        //label('fedora36rpm')
        label params.OS == "any" ? "" : params.OS
    }
    
    
    parameters {
        //string name: 'PACKAGE_PATH', defaultValue: 'https://af01p-ir.devtools.intel.com/artifactory/scb-local/QAT_packages/QAT_U/QAT_UPSTREAM_MAIN', description: 'Path to package', trim: false
        //string name: 'PACKAGE', defaultValue: 'QAT_UPSTREAM_MAIN.L.0.0.0-00734.tar.gz', description: 'Package name', trim: false
        string name: 'GITHUB_PR_NUMBER', defaultValue: '95', description: 'PR number', trim: false
        string name: 'EMAIL_MAINTAINER', defaultValue: 'marzena.kupniewska@intel.com', description: 'Main person to send mail to. Only this person gets mail when pipe crashes.',  trim: false
        string name: 'EMAIL_RECEIPENTS', defaultValue: 'marzena.kupniewska@intel.com', description: 'List of coma separated email receipents to CC mail.',  trim: false
        choice(name: "OS", choices: ["Fedora36dell", "fedora36rpm", "fedora37rpm", "fedora34rpm", "fedora35rpm"])
        //booleanParam name: 'IGNORE_WARNINGS', defaultValue: false,  description: 'Ignore log warnings' 
    }
    
    environment {
        //GIT_TRACE_PACKET = 1
        //GIT_TRACE = 1
        //GIT_CURL_VERBOSE = 1
        CREDS = credentials('MarzenaOlga_AD')
    }
    
    
    
        
        
    stages {
        
        stage('Prepare venv') {
            steps {
                script {
                    if (isUnix()) {
                        sh "echo LINUX"
                        env.ISUNIX = "TRUE" // cache isUnix() function to prevent blueocean show too many duplicate step (Checks if running on a Unix-like node) in python function below
                        sh 'python3 -m venv pyenv'
                        PYTHON_PATH =  sh(script: 'echo ${WORKSPACE}/pyenv/bin/', returnStdout: true).trim()                        
                    }
                    else {
                        env.ISUNIX = "FALSE"
                        powershell(script:"py -3 -m venv pyenv") // windows not allow call python3.exe with venv. https://github.com/msys2/MINGW-packages/issues/5001
                        PYTHON_PATH =  sh(script: 'echo ${WORKSPACE}/pyenv/Scripts/', returnStdout: true).trim()
                    }

                    try  {
                        // Sometime agent with older pip version can cause error due to non compatible plugin.
                        Python("-m pip install --upgrade pip --proxy=http://proxy-dmz.intel.com:912")
                    } 
                    catch (ignore) { } // update pip always return false when already lastest version
                    // After this you can call Python() anywhere from pipeline
                    //pip freeze > requirements.txt
                    //Python("-m pip install -r requirements.txt --proxy=http://proxy-chain.intel.com:911")
                    Python("-m pip install requests --proxy=http://proxy-dmz.intel.com:912")
                    echo ""
                }                
            }
        }
        
        stage('run'){
            steps {
                git branch: 'main',
                url: 'https://github.com/intel-sandbox/automation.qat.verifying.jenkins'
                Python ('multi.py')
            }
        }

    }
    
    
    
    
    post{
        success{
            emailext body: 'Check console output at  ${BUILD_URL}.\n ', attachmentsPattern: '*.log' , attachLog: true, mimeType: 'text/html', subject: '[RPM generation][QAT] ${JOB_NAME} - (${BUILD_NUMBER}) Finished Successfuly!', to: '$EMAIL_MAINTAINER'
            //cleanWs()
            echo "Success"
        }
        unsuccessful{
            emailext body: 'Check console output at  ${BUILD_URL}.\n ', attachmentsPattern: '*.log' , attachLog: true, mimeType: 'text/html', subject: '[IA] ${JOB_NAME} - (${BUILD_NUMBER}) Failed!', to: '$EMAIL_MAINTAINER'
            //cleanWs()
            echo "Fail"
        }
    }
}